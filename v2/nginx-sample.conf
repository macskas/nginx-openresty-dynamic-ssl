http {
    lua_package_path "/usr/local/openresty/nginx/conf/conf.d/?.lua;;";
    
    ## if cert_method is lua_shared_dict in the .lua file
    # lua_shared_dict certs 16m;
    # lua_shared_dict certs_content 32m;

    init_by_lua_block {
        require "dynamic-ssl"
    }
}
server {
    ssl_certificate     certs/dummy.crt;
    ssl_certificate_key certs/dummy.key;

    ssl_certificate_by_lua_block {
	    local dssl = require "dynamic-ssl"
	    --- params: cert base directory, product_id, cache_seconds, fallback to original cert on most errors
	    local lSSL = dssl:new("/etc/letsencrypt", "1", 600, false)
	    
	    --- override default certificate path
	    --- lSSL:set_certificate_path("/tmp/test.crt", "/tmp/test.key")
	    
	    --- cert process method: opaque / der (opaque faster, only works with cache_method: lrucache)
	    lSSL:set_cert_process_method("opaque")
	    lSSL:exec()
    }

    
    # validation - only for debug
    location /dssl/ {
	# GET /dssl/flush-cache/
	# GET /dssl/get-cache-stats/
	# GET /dssl/flush-cache-domain/?domain=domain.com
	content_by_lua_block {
	    local dssl = require "dynamic-ssl"
	    local lSSL = dssl:new("/etc/letsencrypt", "1", 600, false)
	    lSSL:set_cert_process_method("opaque")
	    lSSL:handle_route()
	}
    }
    
    location /ssl-debug-info/ {
	content_by_lua_block {
	    local cj = require "cjson"
	    ngx.header["Content-Type"] = "application/json"
	    ngx.print(cj.encode(ngx.ctx.DYNAMIC_SSL))
	    ngx.exit(200)
	}
    }

}

### EXAMPLE OUTPUT ###
# debug - get-cache-stats
#{
#  "message": "OK",
#  "data": {
#    "method": "lrucache",
#    "capacity": {
#      "certs": 512,
#      "certs_content": 512
#    },
#    "available": true,
#    "free_space": {
#      "certs": 510,
#      "certs_content": 510
#    }
#  },
#  "success": true,
#  "code": 200
#}
# debug - flush-cache
#{
#  "message": "OK (flush_ok: 2)",
#  "data": false,
#  "success": true,
#  "code": 200
#}
# debug - flush-cache-domain
#{
#  "message": "OK (modified: 4)",
#  "data": false,
#  "success": true,
#  "code": 200
#}
# debug ssl-debug-info
#{
#  "method": "der",
#  "cache_method": "lrucache",
#  "result": 1,
#  "source": "cache:lrucache"
#}
